<?xml version="1.0" encoding="UTF-8"?>

<!--TRACE < DEBUG < INFO <  WARN < ERROR.  -->
<configuration>
    <jmxConfigurator/>

    <!-- 用于显示的描述 -->
    <contextName>日志配置</contextName>
    <!--用于引用其他配置文件 -->
    <!--<property resource="jdbc.properties"/>-->

    <!--定义日志文件的存储地址,使用绝对路径-->
    <!-- ==============================================公共配置============================================== -->
    <!-- 设置日志文件的目录名称 -->
    <property name="logFileName" value="template"/>

    <!-- ========================== 自定义输出格式说明================================ -->
    <!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->
    <!-- %r 输出自应用启动到输出该log信息耗费的毫秒数  -->
    <!-- %c 输出所属的类目，通常就是所在类的全名 -->
    <!-- %t 输出产生该日志事件的线程名 -->
    <!-- %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” -->
    <!-- %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->
    <!-- %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlo4.main(TestLog4.java:10)  -->
    <!-- ========================================================================== -->

    <!-- log4j2配置颜色 -->
    <!-- https://logging.apache.org/log4j/2.x/manual/layouts.html -->

    <!-- 日志默认存放的位置,可以设置为项目根路径下,也可指定绝对路径 -->
    <!-- 存放路径一:通用路径,window平台 -->
    <!-- <property name="basePath">d:/logs/${logFileName}</property> -->
    <!-- 存放路径二:web工程专用,java项目没有这个变量,需要删掉,否则会报异常,这里把日志放在web项目的根目录下 -->
    <!-- <property name="basePath">${web:rootDir}/${logFileName}</property> -->
    <!-- 存放路径三:web工程专用,java项目没有这个变量,需要删掉,否则会报异常,这里把日志放在tocmat的logs目录下 -->
    <property name="basePath" value="logs/${logFileName}"/>

    <!-- 控制台默认输出格式,"%-5level":日志级别,"%l":输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 -->
    <!--<property name="console_log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %l - %m%n</property>-->
    <property name="console_log_pattern"
              value="%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %5p %blue([%t:%r]) [%cyan(%c{1.}):%M:%L] --> %m%n"/>
    <!-- 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 -->
    <!-- <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %C.%M - %m%n</property> -->
    <!-- 日志文件默认输出格式,另类带行号输出(对日志输出性能未知);%C:大写,类名;%M:方法名;%L:行号;%m:错误信息;%n:换行 -->
    <property name="log_pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p [%t:%r] [%c{1.}:%M:%L] --> %m%n"/>

    <!-- 日志默认切割的最小单位 -->
    <property name="every_file_size" value="20MB"/>
    <!-- 日志默认输出级别 -->
    <property name="output_log_level" value="INFO"/>


    <!-- ===========================================所有级别日志配置=========================================== -->
    <!-- 日志默认存放路径(所有级别日志) -->
    <property name="all_fileName" value="${basePath}/all.log"/>
    <!-- 日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
    <property name="all_filePattern" value="${basePath}/all/%d{yyyy-MM}/all-%d{yyyy-MM-dd-HH}.%i.log.gz"/>
    <!-- 日志默认同类型日志,同一文件夹下可以存放的数量,不设置此属性则默认为7个,filePattern最后要带%i才会生效 -->
    <property name="all_max" value="500"/>
    <!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
            如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
            如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
    <property name="all_timeInterval" value="12"/>
    <!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
            如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
    <property name="all_timeModulate" value="true"/>

    <!-- ============================================Info级别日志============================================ -->
    <!-- Info日志默认存放路径(Info级别日志) -->
    <property name="info_fileName" value="${basePath}/info.log"/>
    <!-- Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
    <property name="info_filePattern" value="${basePath}/info/%d{yyyy-MM}/info-%d{yyyy-MM-dd}.%i.log.gz"/>
    <!-- Info日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
    <property name="info_max" value="100"/>
    <!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
            如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
            如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
    <property name="info_timeInterval" value="1"/>
    <!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
            如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
    <property name="info_timeModulate" value="true"/>

    <!-- ============================================Debug级别日志============================================ -->
    <!-- Info日志默认存放路径(Info级别日志) -->
    <property name="debug_fileName" value="${basePath}/debug.log"/>
    <!-- Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
    <property name="debug_filePattern" value="${basePath}/debug/%d{yyyy-MM}/debug-%d{yyyy-MM-dd}.%i.log.gz"/>
    <!-- Info日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
    <property name="debug_max" value="100"/>
    <!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
            如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
            如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
    <property name="debug_timeInterval" value="1"/>
    <!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
            如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
    <property name="debug_timeModulate" value="true"/>

    <!-- ============================================Warn级别日志============================================ -->
    <!-- Warn日志默认存放路径(Warn级别日志) -->
    <property name="warn_fileName" value="${basePath}/warn.log"/>
    <!-- Warn日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
    <property name="warn_filePattern" value="${basePath}/warn/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}.%i.log.gz"/>
    <!-- Warn日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
    <property name="warn_max" value="100"/>
    <!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
            如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
            如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
    <property name="warn_timeInterval" value="1"/>
    <!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
            如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
    <property name="warn_timeModulate" value="true"/>

    <!-- ============================================Error级别日志============================================ -->
    <!-- Error日志默认存放路径(Error级别日志) -->
    <property name="error_fileName" value="${basePath}/error.log"/>
    <!-- Error日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
    <property name="error_filePattern" value="${basePath}/error/%d{yyyy-MM}/error-%d{yyyy-MM-dd}.%i.log.gz"/>
    <!-- Error日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
    <property name="error_max" value="100"/>
    <!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
            如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
            如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
    <property name="error_timeInterval" value="1"/>
    <!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
            如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
    <property name="error_timeModulate" value="true"/>


    <!-- ============================================控制台显示控制============================================ -->
    <!-- 控制台显示的日志最低级别 -->
    <property name="console_print_level" value="INFO"/>


    <!-- Console 输出设置 -->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>${console_print_level}</level>
        </filter>
        <encoder>
            <pattern>${console_log_pattern}</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="AllFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${all_fileName}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${all_filePattern}</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>128MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="InfoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${info_fileName}</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${info_filePattern}</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>128MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="DebugFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${debug_fileName}</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${debug_filePattern}</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>128MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="WarnFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${warn_fileName}</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${warn_filePattern}</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>128MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>


    <!-- 按照每天生成日志文件 -->
    <appender name="ErrorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${error_fileName}</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>${error_filePattern}</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>128MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${log_pattern}</pattern>
        </encoder>
    </appender>

    <logger name="cn.ikarosx" level="debug" />



    <!--建立一个默认的root的logger-->
    <root level="${output_log_level}">
        <!--<appender-ref ref="AllFile"/>-->
        <appender-ref ref="Console"/>
        <appender-ref ref="InfoFile"/>
        <appender-ref ref="WarnFile"/>
        <appender-ref ref="ErrorFile"/>
        <appender-ref ref="DebugFile"/>
        <!-- 线上才开启MAIL -->
        <!--<appender-ref ref="MAIL"/>-->
    </root>


</configuration>

